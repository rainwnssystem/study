apiVersion: v1
kind: Namespace
metadata:
  name: <NAMESPACE>
  labels:
    elbv2.k8s.aws/pod-readiness-gate-inject: enabled
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  <APP>
  namespace: <NAMESPACE>
  labels:
    app:  <APP>
spec:
  selector:
    matchLabels:
      app: <APP>
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  <APP>
    spec:
      nodeSelector:
        dedicated: app
      tolerations:
        - key: dedicated
          value: app
          effect: NoSchedule
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: capacity-spread
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: <APP>
      readinessGates:
        - conditionType: target-health.alb.ingress.k8s.aws/<APP>_<APP>_8080
      containers:
      - name:  <APP>
        image:  <IMAGE>
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "45"]
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /_status/healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: <APP>
              key: DB_HOST
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: <APP>
              key: DB_PASS
        ports:
        - containerPort: 8080
          name:  <APP>
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
      volumes:
        - name: localtime
          hostPath:
            path: /usr/share/zoneinfo/Asia/Shanghai
      restartPolicy: Always
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: <APP>
  namespace: <NAMESPACE>
data:
  key: default
---
apiVersion: v1
kind: Secret
metadata:
  name: <APP>
  namespace: <NAMESPACE>
type: Opaque
stringData:
  DB_PASS: hello
---
apiVersion: v1
kind: Service
metadata:
  name: <APP>
  namespace: <NAMESPACE>
spec:
  selector:
    app: <APP>
  type: ClusterIP
  ports:
  - name: <APP>
    protocol: TCP
    port: 8080
    targetPort: 8080
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: <APP>
  namespace: <NAMESPACE>
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: <APP>
  minReplicas: 2
  maxReplicas: 64
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 30
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 30
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: <APP>
  namespace: <NAMESPACE>
  annotations:
    alb.ingress.kubernetes.io/load-balancer-name: <APP>
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-path: /healthcheck
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "5"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "2"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "2"
    alb.ingress.kubernetes.io/target-group-attributes: >-
      deregistration_delay.timeout_seconds=60
    alb.ingress.kubernetes.io/load-balancer-attributes: >-
      deletion_protection.enabled=true,
    # access_logs.s3.enabled=true,
    # access_logs.s3.bucket=project-logbucket20241219020456227500000001,
    # access_logs.s3.prefix=accesslog,
    # connection_logs.s3.enabled=true,
    # connection_logs.s3.bucket=project-logbucket20241219020456227500000001,
    # connection_logs.s3.prefix=connectionlog
    alb.ingress.kubernetes.io/actions.response-403: >
      {"type":"fixed-response","fixedResponseConfig":{"contentType":"text/plain","statusCode":"403","messageBody":"403 error text"}}
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: <APP>
            port:
              number: 8080
      - path: /
        pathType: Prefix
        backend:
          service:
            name: response-403
            port:
              name: use-annotation
